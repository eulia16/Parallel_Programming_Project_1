Basic Outline For Genetic Algorithms

-
1) Randomly initialize populations p
2) Determine fitness of population
3) Until convergence repeat:
      a) Select parents from population
      b) Crossover and generate new population
      c) Perform mutation on new population
      d) Calculate fitness for new population
-

we must first design the alg and everything before implementing non-constant code
using scarletts design of phasers(this fits perfectly w/ genetic alg design anyways), we can
break our code into different 'epochs' using the phaser java class


//rough alg in my mind will work as follows

-begin program
-create a set number of threads based on the number of cores available(ensure even number due to exchanger?)
-each thread will be performing its own genetic alg selections/crossovers/mutations/etc... and when it finishes
    an iteration, it will then put itself up for an exchanger, to allow exchanging some of the best fitness populations
    it has, and then taking another threads top few fitness populations.
-iterate based upon the number of generations of populations(probs a hardcoded number), OR iterate until the
    overall population fitness is over a certain number
21

definite methods we need(in order):
1)Selection- We randomly (using a biased coin) select a subset of the individuals based on their fitness
2)Crossover-
            -Next we mate strings for crossover. For each couple we first decide (using some pre-defined
                probability, for instance 0.6) whether to actually perform the crossover or not

             -If we decide to actually perform crossover, we randomly extract the crossover points, for
                instance 2 and 5

3)Mutation- The final step is to apply random mutations: for each bit that we are to copy to the new
            population we allow a small probability of error (for instance 0.1)

